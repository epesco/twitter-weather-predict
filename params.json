{
  "name": "Twitter Weather Prediction",
  "tagline": "",
  "body": "### Problem Statement\r\nFive hundred million tweets are posted per day via twitter. Twitter is commonly used for sentiment analysis and \tFive hundred million tweets are posted per day via twitter. Twitter is commonly used for sentiment analysis and quantifying influence, but can a tweet be used to predict the weather in a given area? Natural disasters and extreme weather prediction are popular choices for mining twitter data, but few attempts have been made for the day to day weather. This paper explores the possibility of utilizing supervised learning to classify a location’s weather after training on the lexicon associated with a certain weather type. The methods explored are a naive attempt, naive bayes, positive naive bayes, support vector machines, and ensembling. Within each algorithm, we explore the training, construction, and performance of the model. \r\nIn 2013, CrowdFlower created a competition around solving this very task and the winner created a ridge regression model and an ensemble of forests where the output of the ensemble was fed back into the ridge regression model as input to relearn. Our aim is not for accuracy, but for analysis of more simple methods’ performance on this task. Weather prediction using tweets is complex; words are not independent of each other, given a small subset the likelihood of certain words and weather associations are skewed. The methods we use are not suited for a time series problem like weather prediction where the weather of one time step is dependent on a prior step. More complex and/or time step dependent methods should be considered as more viable options if accuracy is the ultimate goal, but we are interested in exploring the performance of simple, easily accessible algorithms in this space. \r\n\r\n### DATA COLLECTION & PROCESSING\r\n#### Collection\r\nWe collected data from the evening of October 4th to the morning of Oct 10th which produced 119, 061 tweets and 135 hours of weather data at half hour intervals.  Using the twitter streaming API, we filtered on location and used the OpenWeatherMap API to check weather for city of Boston. The weather data came pre-divided into 9 categories. These were Thunderstorm, Drizzle, Rain, Snow, Clear, Clouds, Extreme, Atmosphere, and Additional. Extreme weather refered to conditions like hurricanes, tornadoes, and hail. Atmosphere included conditions which impair human vision such as fog, dust, and ash. Finally, Additional was for any weather that did not fit into the above categories.\r\nTo combine our data, we iterated through the weather data and produced time ranges of each span of continuous weather and added them to a dictionary where the key was one of the weather types defined by the weather API (9 in total) and the values were tuples of time ranges that the given weather type occurred. \r\n#### Labeling\r\nWe iterated through all the tweets and produced a tuple consisting of a dictionary of the features they contained and the weather label which was found by looking up the time range they fell into and labeled them according to the weather type associated with that time range. An readable example of the labeled data is below:\r\n({contains(down.): True, contains(#debate): True, contains(how): True, contains(before): True, contains(the): True, contains(really): True, contains(showing): True, contains(affected): True, contains(crime): True, u'contains(@billclinton)': True, contains(he): True, contains(there): True, contains(personally): True, contains(has): True, contains(debt): True, contains(you\"): True, contains(was): True, contains(houston): True, contains(\"how): True,contains(cared): True, contains(that): True, contains(in): True}, 'Clear')\r\n\r\n\r\n\r\n### Naive Bayes\r\n#### Attempt #1\r\n\r\nHere is text on attempt #1 naive bayes\r\n\r\n\r\n### Authors and Contributors\r\n\r\n@msmcconnell\r\n@amjaeger17\r\n@rcjacques\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}